#include <boost/test/unit_test.hpp>

#include "json/json_spirit_utils.h"
#include "json/json_spirit_reader_template.h"
#include "json/json_spirit_writer_template.h"

#include "pegdata.h"

BOOST_AUTO_TEST_SUITE(cfractions_tests)

BOOST_AUTO_TEST_CASE(cfractions_equality)
{
    int x = 10;
    CFractions f1(0, CFractions::STD);
    std::string f1_data_json_txt = "[103187104, 102155233, 101133681, 100122345, 99121121, 98129911, 97148611, 96177125, 95215353, 94263199, 93320568, 92387362, 91463488, 90548854, 89643365, 88746931, 87859456, 86980862, 86111053, 85249942, 84397443, 83553469, 82717933, 81890755, 81071847, 80261129, 79458517, 78663930, 77877290, 77098517, 76327533, 75564257, 74808615, 74060528, 73319923, 72586724, 71860856, 71142248, 70430826, 69726517, 69029252, 68338960, 67655570, 66979014, 66309224, 65646133, 64989670, 64339775, 63696377, 63059412, 62428819, 61804546, 61186500, 60574636, 59968889, 59369200, 58775509, 58187752, 57605875, 57029816, 56459519, 55894922, 55335974, 54782657, 54234829, 53692482, 53155557, 52624001, 52097761, 51576784, 51061017, 50550406, 50044902, 49544453, 49049009, 48558519, 48072934, 47592205, 47116282, 46645119, 46178669, 45716882, 45259713, 44807114, 44359045, 43915455, 43476299, 43041536, 42611122, 42185011, 41763160, 41345527, 40932073, 40522753, 40117525, 39716349, 39319186, 38925994, 38536735, 38151366, 37769854, 37392155, 37018233, 36648051, 36281570, 35918754, 35559568, 35203972, 34851931, 34503412, 34158378, 33816795, 33478627, 33143840, 32812402, 32484277, 32159436, 31837841, 31519462, 31204267, 30892223, 30583303, 30277470, 29974695, 29674948, 29378199, 29084417, 28793573, 28505637, 28220581, 27938374, 27658990, 27382400, 27108576, 26837490, 26569116, 26303425, 26040391, 25779987, 25522186, 25266964, 25014295, 24764153, 24516510, 24271345, 24028633, 23788346, 23550462, 23314956, 23081808, 22850990, 22622481, 22396255, 22172293, 21950569, 21731063, 21513753, 21298616, 21085630, 20874773, 20666025, 20459365, 20254771, 20052224, 19851700, 19653185, 19456653, 19262088, 19069466, 18878770, 18689983, 18503083, 18318052, 18134871, 17953524, 17773988, 17596248, 17420284, 17246084, 17073622, 16902886, 16733857, 16566517, 16400853, 16236844, 16074476, 15913731, 15754595, 15597049, 15441078, 15286667, 15133802, 14982464, 14832640, 14684313, 14537469, 14392094, 14248174, 14105693, 13964636, 13824990, 13686740, 13549872, 13414373, 13280229, 13147427, 13015953, 12885793, 12756935, 12629365, 12503072, 12378043, 12254261, 12131719, 12010402, 11890298, 11771394, 11653681, 11537143, 11421771, 11307555, 11194478, 11082533, 10971708, 10861991, 10753371, 10645839, 10539381, 10433986, 10329646, 10226349, 10124086, 10022845, 9922617, 9823390, 9725155, 9627903, 9531625, 9436308, 9341945, 9248526, 9156039, 9064479, 8973836, 8884097, 8795257, 8707304, 8620230, 8534028, 8448688, 8364201, 8280559, 8197753, 8115777, 8034618, 7954272, 7874729, 7795982, 7718021, 7640842, 7564432, 7488788, 7413900, 7339761, 7266364, 7193701, 7121764, 7050547, 6980042, 6910241, 6841138, 6772728, 6705000, 6637950, 6571570, 6505854, 6440795, 6376388, 6312624, 6249498, 6187003, 6125132, 6063881, 6003243, 5943210, 5883777, 5824940, 5766691, 5709024, 5651933, 5595414, 5539460, 5484065, 5429224, 5374932, 5321184, 5267972, 5215292, 5163139, 5111507, 5060392, 5009788, 4959691, 4910093, 4860992, 4812383, 4764258, 4716617, 4669451, 4622756, 4576528, 4530763, 4485455, 4440601, 4396194, 4352232, 4308711, 4265623, 4222967, 4180738, 4138930, 4097541, 4056565, 4016000, 3975839, 3936082, 3896720, 3857753, 3819175, 3780983, 3743174, 3705741, 3668684, 3631997, 3595678, 3559721, 3524124, 3488883, 3453994, 3419455, 3385260, 3351408, 3317893, 3284714, 3251866, 3219348, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]";
    
    json_spirit::Value jval;
    json_spirit::read_string(f1_data_json_txt, jval);
    const json_spirit::Array& jarray = jval.get_array();
    
    int i =0;
    for(const auto & jf : jarray) {
        int64_t f = jf.get_int64();
        f1.f[i] = f;
        i++;
    }
    
    CPegData pd;
    pd.peglevel = CPegLevel(1,0,0,0,0,0); // can get block of
    pd.fractions = f1;
    pd.nLiquid = f1.High(pd.peglevel);
    pd.nReserve = f1.Low(pd.peglevel);
    std::string f1_b64 = pd.ToString();
    
    std::cout << "f1_b64:" << f1_b64 << std::endl;
    BOOST_CHECK(f1_b64 == "AQAAAAAAAAABAgACAAAAAAAAAAAAAHsBAAAAAAAAeAHt0TFOg0EQg9EAEjWnoEHiSByGk3AjDkQBgfyP4pNWmwaqSYHjscc7MW+vj/en8+fm+8/5U7xMT6dbXw7ky/h3/9r5x+fls8ujH/bP3T18vWO35x1oH4e7eXXvugvn6/yBcGDfJZvbx+neoeNPh6Fze1BecafXj9uD7sGhu+6OgX1zPvt0c76Vztc9vPv8kA+H3sPl8Bf5IB1vnjmU357osLkrLs/eCu0X+ZtTH9189Tv56PyQXu4O8yId0svle5+O02Fz+KE9HNr3f8SbZ96c+qp7B9LtQXqRDunl5kU+WB2nu8/vNS9Wx+U1x7w55vz05vHRV7x7cuuXw4+v/PYhP+wcl9d36PbpO3/37K+QH8rHdyiXr7zzv9avvb934Hru3eby+flg5+V8cnA+2Hl578G7v9qrb8VX8+biRfvPL+8/J1YfPg1MA9PANDANTAPTwDQwDUwD08A0MA1MA9PANDANTAPTwDQwDUwD08A0MA38RwNfsypPawIBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADkC1QCAAAAAAAAAA==");
}

BOOST_AUTO_TEST_CASE(ccompressedfractions_leaf1)
{
    int x = 10;
    CFractions f1(0, CFractions::STD);
    std::string f1_data_json_txt = "[103187104, 102155233, 101133681, 100122345, 99121121, 98129911, 97148611, 96177125, 95215353, 94263199, 93320568, 92387362, 91463488, 90548854, 89643365, 88746931, 87859456, 86980862, 86111053, 85249942, 84397443, 83553469, 82717933, 81890755, 81071847, 80261129, 79458517, 78663930, 77877290, 77098517, 76327533, 75564257, 74808615, 74060528, 73319923, 72586724, 71860856, 71142248, 70430826, 69726517, 69029252, 68338960, 67655570, 66979014, 66309224, 65646133, 64989670, 64339775, 63696377, 63059412, 62428819, 61804546, 61186500, 60574636, 59968889, 59369200, 58775509, 58187752, 57605875, 57029816, 56459519, 55894922, 55335974, 54782657, 54234829, 53692482, 53155557, 52624001, 52097761, 51576784, 51061017, 50550406, 50044902, 49544453, 49049009, 48558519, 48072934, 47592205, 47116282, 46645119, 46178669, 45716882, 45259713, 44807114, 44359045, 43915455, 43476299, 43041536, 42611122, 42185011, 41763160, 41345527, 40932073, 40522753, 40117525, 39716349, 39319186, 38925994, 38536735, 38151366, 37769854, 37392155, 37018233, 36648051, 36281570, 35918754, 35559568, 35203972, 34851931, 34503412, 34158378, 33816795, 33478627, 33143840, 32812402, 32484277, 32159436, 31837841, 31519462, 31204267, 30892223, 30583303, 30277470, 29974695, 29674948, 29378199, 29084417, 28793573, 28505637, 28220581, 27938374, 27658990, 27382400, 27108576, 26837490, 26569116, 26303425, 26040391, 25779987, 25522186, 25266964, 25014295, 24764153, 24516510, 24271345, 24028633, 23788346, 23550462, 23314956, 23081808, 22850990, 22622481, 22396255, 22172293, 21950569, 21731063, 21513753, 21298616, 21085630, 20874773, 20666025, 20459365, 20254771, 20052224, 19851700, 19653185, 19456653, 19262088, 19069466, 18878770, 18689983, 18503083, 18318052, 18134871, 17953524, 17773988, 17596248, 17420284, 17246084, 17073622, 16902886, 16733857, 16566517, 16400853, 16236844, 16074476, 15913731, 15754595, 15597049, 15441078, 15286667, 15133802, 14982464, 14832640, 14684313, 14537469, 14392094, 14248174, 14105693, 13964636, 13824990, 13686740, 13549872, 13414373, 13280229, 13147427, 13015953, 12885793, 12756935, 12629365, 12503072, 12378043, 12254261, 12131719, 12010402, 11890298, 11771394, 11653681, 11537143, 11421771, 11307555, 11194478, 11082533, 10971708, 10861991, 10753371, 10645839, 10539381, 10433986, 10329646, 10226349, 10124086, 10022845, 9922617, 9823390, 9725155, 9627903, 9531625, 9436308, 9341945, 9248526, 9156039, 9064479, 8973836, 8884097, 8795257, 8707304, 8620230, 8534028, 8448688, 8364201, 8280559, 8197753, 8115777, 8034618, 7954272, 7874729, 7795982, 7718021, 7640842, 7564432, 7488788, 7413900, 7339761, 7266364, 7193701, 7121764, 7050547, 6980042, 6910241, 6841138, 6772728, 6705000, 6637950, 6571570, 6505854, 6440795, 6376388, 6312624, 6249498, 6187003, 6125132, 6063881, 6003243, 5943210, 5883777, 5824940, 5766691, 5709024, 5651933, 5595414, 5539460, 5484065, 5429224, 5374932, 5321184, 5267972, 5215292, 5163139, 5111507, 5060392, 5009788, 4959691, 4910093, 4860992, 4812383, 4764258, 4716617, 4669451, 4622756, 4576528, 4530763, 4485455, 4440601, 4396194, 4352232, 4308711, 4265623, 4222967, 4180738, 4138930, 4097541, 4056565, 4016000, 3975839, 3936082, 3896720, 3857753, 3819175, 3780983, 3743174, 3705741, 3668684, 3631997, 3595678, 3559721, 3524124, 3488883, 3453994, 3419455, 3385260, 3351408, 3317893, 3284714, 3251866, 3219348, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]";
    
    {
        json_spirit::Value jval;
        json_spirit::read_string(f1_data_json_txt, jval);
        const json_spirit::Array& jarray = jval.get_array();
        
        int i =0;
        for(const auto & jf : jarray) {
            int64_t f = jf.get_int64();
            f1.f[i] = f;
            i++;
        }
    }
    
    CCompressedFractions fc1(f1, 0, 30, 8);
    
    std::vector<int64_t> chk11{0, 2285064261, 1528644339, 1022619876, 684103824, 457646172, 306152323, 204807256, 95177528, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    BOOST_CHECK(chk11.size() == 30);
    std::vector<int64_t> chk12{505719484, 480934199, 457363637, 434948244, 413631447, 393359383, 374080856, 355747171};
    BOOST_CHECK(chk12.size() == 8);
    
    for (int i=0; i<chk11.size(); i++) {
        BOOST_CHECK(chk11[i] == fc1.fps[i]);
    }
    for (int i=0; i<chk12.size(); i++) {
        BOOST_CHECK(chk12[i] == fc1.fms[i]);
    }
}

BOOST_AUTO_TEST_CASE(ccompressedfractions_leaf2)
{
    int x = 10;
    CFractions f2(0, CFractions::STD);
    std::string f2_data_json_txt = "[35244051, 34891611, 34542695, 34197268, 33855295, 33516742, 33181574, 32849760, 32521262, 32196050, 31874089, 31555349, 31239795, 30927398, 30618124, 30311942, 30008823, 29708735, 29411647, 29117531, 28826355, 28538092, 28252711, 27970183, 27690482, 27413578, 27139443, 26868048, 26599367, 26333374, 26070040, 25809340, 25551247, 25295734, 25042777, 24792349, 24544426, 24298982, 24055992, 23815432, 23577277, 23341505, 23108090, 22877009, 22648239, 24830429, 24582124, 24336303, 24092940, 23852011, 23613491, 69186320, 68494457, 67809513, 67131417, 66460103, 65795502, 65137547, 64486172, 63841310, 63202986, 62570956, 61945247, 188851021, 186962511, 185092886, 183241957, 181409537, 179595442, 177799487, 176021492, 174261277, 172518664, 170793478, 169085543, 167394688, 165720742, 164063533, 162422898, 160798669, 159190683, 157598776, 156022788, 154462560, 152917935, 151388755, 149874868, 148376119, 146892358, 145423435, 143969200, 142529508, 141104213, 139693171, 138296239, 136913277, 135544144, 134188702, 132846816, 131518347, 130203164, 128901132, 127612121, 126336000, 125072640, 123821914, 122583695, 121357857, 120144279, 118942836, 117753408, 116575873, 115410115, 114256014, 113113453, 111982320, 110862496, 109753871, 108656332, 107569769, 106494072, 105429131, 104374839, 103331091, 102297780, 101274803, 100262054, 99259434, 98266840, 97284171, 96311329, 95348216, 94394734, 93450787, 92516278, 91591116, 90675204, 89768452, 88870768, 87982061, 87102240, 86231217, 85368906, 84515216, 83670064, 82833364, 82005030, 81184979, 80373129, 79569399, 78773705, 77985968, 77206108, 76434046, 75669706, 74913009, 74163880, 73422240, 72688019, 71961138, 71241527, 70529111, 69823820, 69125582, 68434326, 67749983, 67072483, 66401759, 65737741, 65080363, 64429558, 63785264, 63147411, 62515937, 61890777, 61271869, 60659150, 60052559, 59452033, 58857513, 58268938, 57686249, 57109386, 56538292, 55972910, 55413180, 54859048, 54310458, 53767353, 53229680, 52697383, 52170409, 51648705, 51132218, 50620896, 50114687, 49613540, 49117405, 48626231, 48139968, 47658569, 47181983, 46710163, 46243061, 45780631, 45322824, 44869596, 44420900, 43976691, 43536924, 43101555, 42670539, 42243835, 41821396, 41403182, 40989150, 40579258, 40173466, 39771731, 39374014, 38980274, 38590471, 38204566, 37822521, 37444296, 37069852, 36699154, 36332162, 35968841, 35609153, 35253061, 34900531, 34551525, 34206010, 33863950, 33525310, 33190057, 32858157, 32529574, 32204279, 31882236, 31563414, 31247780, 30935302, 30625949, 30319689, 30016493, 29716328, 29419164, 29124973, 28833723, 28545386, 28259932, 27977333, 27697559, 27420583, 27146378, 26874914, 26606165, 26340104, 26076702, 25815935, 25557776, 25302199, 25049176, 24798685, 24550698, 24305190, 24062138, 23821517, 23583302, 23347469, 23113994, 22882854, 22654026, 22427485, 22203211, 21981179, 21761367, 21543753, 21328315, 21115032, 20903882, 20694843, 20487895, 20283016, 20080185, 19879384, 19680590, 19483784, 19288947, 19096057, 18905097, 18716045, 18528885, 18343596, 18160160, 17978558, 17798773, 17620785, 17444577, 17270132, 17097430, 16926456, 16757191, 16589619, 16423723, 16259486, 16096891, 15935922, 15776563, 15618797, 15462609, 15307983, 15154904, 15003354, 14853320, 14704788, 14557740, 14412162, 14268041, 14125360, 13984107, 13844266, 13705823, 13568765, 13433077, 13298746, 13165759, 13034101, 12903760, 12774723, 12646976, 12520505, 12395301, 12271348, 12148634, 12027148, 11906876, 11787808, 11669930, 11553230, 11437698, 11323321, 11210087, 11097987, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]";
    
    {
        json_spirit::Value jval;
        json_spirit::read_string(f2_data_json_txt, jval);
        const json_spirit::Array& jarray = jval.get_array();
        
        int i =0;
        for(const auto & jf : jarray) {
            int64_t f = jf.get_int64();
            f2.f[i] = f;
            i++;
        }
    }
    
    CCompressedFractions fc1(f2, 0, 30, 8);
    
    std::vector<int64_t> chk11{0, 4012954773, 5269661183, 3525254523, 2358295702, 1577633212, 1055392061, 706027476, 328103377, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    BOOST_CHECK(chk11.size() == 30);
    std::vector<int64_t> chk12{172730920, 164265388, 156214755, 148558678, 141277823, 134353810, 127769138, 121507181};
    BOOST_CHECK(chk12.size() == 8);
    
    for (int i=0; i<chk11.size(); i++) {
        BOOST_CHECK(chk11[i] == fc1.fps[i]);
    }
    for (int i=0; i<chk12.size(); i++) {
        //std::cout << i << " " << chk12[i] << " " << fc1.fms[i] << std::endl;
        BOOST_CHECK(chk12[i] == fc1.fms[i]);
    }
}

BOOST_AUTO_TEST_SUITE_END()
